TUTORIAL DO GIT


(✅️) 1 - RAZÕES PARA SE TRABALHAR COM GIT
     - É O PADRÃO DE MERCADO, É ALGO IMPERATIVO, OU SE USA GIT, 
       OU VOCÊ NÃO SERÁ CONSIDERADO UM DESENVOLVEDOR CONFIÁVEL  
     - ORGANIZAÇÃO DO SEU TRABALHO DE DESENVOLVIMENTO
     - DESENVOLVIMENTO DE SOFTWARE EM EQUIPE
     - DESENVOLVIMENTO DE FUNCIONALIDADES EM BRANCHS
     - SITE DO GIT

(✅️) 2 - INSTALAÇÃO NO GIT

(✅️) 3 - CONFIGURAÇÃO INICIAL
     (✅️) Verificar instalação do git: git -v
     (✅️) Configurar nome de usuário: git init
     (✅️) Configurar user name: git config --global user.name  "Jean-Sawano"
     (✅️) Configurar e-mail: git config --global user.email "sawano.projetos@gmail.com"
     (✅️) Configurar a colorização: git config --global color.ui true

(✅️) 4 - CRIANDO O PRIMEIRO REPOSITORIO
     (✅️) git init
     (✅️) acessando um macarrão .git
     (✅️) criando um arquivo de teste: touch index.php

(✅️) 5 - ENTENDENDO OS ESTÁGIOS DO GIT
     () arquivos não rastreados: git status (Arquivos sem controles de versão)
     () arquivos a serem confirmados: git add. (Arquivos com controle de versão)
     () arquivos confirmados: git commit -m "comentário" (arquivos Comitando)
     () verificação de arquivos confirmados: git log (Verificando arquivos comitados)

() 6 - CONHECENDO ALGUNS COMANDOS DE ESTATISCAS DO GIT
     () git log (exibe o histórico de commits)
     () git log --since = 2. dias
     () git log --since = 2. semanas
     () git stats (modificações)
     () git log --pretty = oneline (tornando a exibição do git log mais agradável)
     () git log --pretty = format: "% h -% an,% ar:% s" (tornando a exibição do git log AINDA mais agradável)

() 7 - IGNORANDO ARQUIVOS DURANTE O CONTROLE DE VERSÃO
     () .gitignore

() 8 - RETORNANDO PELO FLUXO DO GIT
     () status git; git add. ; git reset HEAD <nome do arquivo>
     () git checkout <hash>
     () git reset HEAD ~ 1 (retornando commits)
     () git reset HEAD ~ 1 --soft (remove o commit e mantem os arquivos)
     () git reset HEAD ~ 1 --hard (CUIDADO !! remove o commit e os arquivos)

() 9 - ENTENDENDO OS RAMOS NO GIT 
     () conceitos
     () branch git (visualizando as branches)
     () git checkout -b <nome> (criando uma nova branch)
     () git merge <nome da branch> (ramificações unificando)
     () git log (para verificar o merge)
     () git rebase <nome da branch>

() 10 - CONHECENDO O GITHUB E OUTROS REPOSITORIOS
     () uma criação conta
     () criando repositório
     () git push novos_caminhos master (subindo os arquivos para um repositorio)
     () ssh-keygen (gerando chaves de acesso)
     () cat id_rsa.pub (copiando a chave)
     () git remote add novos_caminhos <url>
     () git remoto (listando repositorios remotos)
     () git branch <nome>; git push novos_caminhos funcionalidade1 (subindo um novo branch para o github)
     () git clone <url> (realizando um clone de um repositorio)
     () git branch -a (ver repositorios remotos)
     () git checkout -b <branch local> <branch remoto> (ligando branches locais em branchs remotos)

() 11 - OBTENDO ATUALIZAÇÕES DO REPOSITÓRIO REMOTO
     () Vamos criar dois repositorios locais para simular duas máquinas
        git pull <repositorio remoto> <branch do repositorio remoto>
     () solicitações de pull
     () git remote add fork <url>

() 12 - COMITES DE APELIDANDO
     () tag git <tag> (criando tags)
     () git tag -l (tags listnado)
     () git push <repositorio> <branch> --tags (tags subindo)

() 13 - CONTRIBUINDO COM OUTROS PROJETOS ATRAVÉS DO FORK NO GITHUB

() 14 - VERSIONAMENTO SEMÂNTICO
        https://semver.org/lang/pt-BR/
        
        VERSÃO PRINCIPAL. VERSÃO MENOR. PATCH (NÃO PODE HAVER QUEBRA COM VERSÕES ANTERIORES)

        VERSÃO COMPLETA - ACRESCENTAR MAJOR VERSION E NÃO TEM COMPATIBILIDADE COM A VERSÃO ANTERIOR
        VERSÃO MENOR - NOVAS FUNCIONALIDADES QUE IMPACTAM VERSÕES ANTERIORES
        PATCH - CORREÇÕES QUE NÃO IRÃO AFETAR A VERSÃO ATUAL

() 15 - RESOLVENDO CONFLITOS

() 17 - INSTALAÇÃO DO GIT FLOW
     () sudo apt-get install git flow

() 16 - TRABALHO COLABORATIVO COM GIT
      
      () Prova abstração e organização dos repositorios git
      () git flow init (iniciarlizar versão)
      () Existirão as seguintes Filiais:
          - MASTER: Código testado e que funciona em produção
          - DEVELOP: Código espelho do master, mas com código não testado
          - RECURSOS: 
               - Branchs que definem novas funcionalidades
               - Prefixo padrão FEATURE / *
               - Os recursos Múltiplas podem ser desenvolvidos ao mesmo tempo
               - Todo recurso inicia o desenvolvimento (usando o ramo git)
               - Todo recurso termina em desenvolver (usando git merge)

               () git checkout master (acessando master)
               () git flow feature start <nome> (criando branch para alguma feature)
               () toque funcionalidade1.php
               () git add. ; git commit -m "Comentário"; ramo git
               () git flow feature finish feature1 (finalizar uma funcionalidade)

               - Compartilhando o desenvolvimento de uma característica com outro desenvolvedor
               () git flow feature start <nome>
               () toque funcionalidade2.php
               () git add. ; git commit -m "Comentário"; ramo git
               () git flow feature publish feature2

               - Recurso Obtendo nova
               () git flow feature track feature3 

               - Listando um recurso de filial
               () lista de recursos de fluxo git
               () git flow feature checkout feature3


          - LANÇAMENTOS: Definir uma nova veroa de produção do software
               - Prefixo Padrão RELEASE / *
               - iniciar em desenvolver
               - Será mesclado em master e também em desenvolver
               - erros podem ser corrigidos por hotfix

               () git flow release start 0.0.1 (criando uma versão)
               () liberação de fluxo git terminar 0.0.1
               () toque em release.php; git add. ; () git commit -m "Adicionando release.php"
               () git flow feature finish feature2 --keepremote
               () git push origin


          - CORREÇÕES
               - definir correções em lançamentos
               - prefixo padrado HOTFIX / *
               - nome sempre será superior a release escopo
               - criado a partir do mestre
               - se mescla com master e development
               - gerará uma nova versão de software

               () início do hotfix git flow 0.0.3 (criando uma hotfix)
               () editar um arquivo
               () correção do git flow terminar 0.0.3

          - BUGFIXES

               - definir um novo ramo para correção de erros
               - prefixo padrado BUGFIX / *
               - criado a partir do desenvolvimento
               - se mescla com branch e desenvolver
     
               () correção de bug do git flow start corrigindo_botao (criando uma correção de bug)


     